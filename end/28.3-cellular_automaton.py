# THREE GOLD STARS
# Question 3-star: Elementary Cellular Automaton

# Please see the video for additional explanation.

# A one-dimensional cellular automata takes in a string, which in our 
# case, consists of the characters '.' and 'x', and changes it according 
# to some predetermined rules. The rules consider three characters, which 
# are a character at position k and its two neighbours, and determine 
# what the character at the corresponding position k will be in the new 
# string.

# For example, if the character at position k in the string  is '.' and 
# its neighbours are '.' and 'x', then the pattern is '..x'. We look up 
# '..x' in the table below. In the table, '..x' corresponds to 'x' which 
# means that in the new string, 'x' will be at position k.

# Rules:
#          pattern in         position k in        contribution to
# Value    current string     new string           pattern number
#                                                  is 0 if replaced by '.'
#                                                  and value if replaced
#                                                  by 'x'
#   1       '...'               '.'                        1 * 0
#   2       '..x'               'x'                        2 * 1
#   4       '.x.'               'x'                        4 * 1
#   8       '.xx'               'x'                        8 * 1
#  16       'x..'               '.'                       16 * 0
#  32       'x.x'               '.'                       32 * 0
#  64       'xx.'               '.'                       64 * 0
# 128       'xxx'               'x'                      128 * 1
#                                                      ----------
#                                                           142

# To calculate the patterns which will have the central character x, work 
# out the values required to sum to the pattern number. For example,
# 32 = 32 so only pattern 32 which is x.x changes the central position to
# an x. All the others have a . in the next line.

# 23 = 16 + 4 + 2 + 1 which means that 'x..', '.x.', '..x' and '...' all 
# lead to an 'x' in the next line and the rest have a '.'

# For pattern 142, and starting string
# ...........x...........
# the new strings created will be
# ..........xx...........  (generations = 1)
# .........xx............  (generations = 2)
# ........xx.............  (generations = 3)
# .......xx..............  (generations = 4)
# ......xx...............  (generations = 5)
# .....xx................  (generations = 6)
# ....xx.................  (generations = 7)
# ...xx..................  (generations = 8)
# ..xx...................  (generations = 9)
# .xx....................  (generations = 10)

# Note that the first position of the string is next to the last position 
# in the string.

# Define a procedure, cellular_automaton, that takes three inputs: 
#     a non-empty string, 
#     a pattern number which is an integer between 0 and 255 that
# represents a set of rules, and 
#     a positive integer, n, which is the number of generations. 
# The procedure should return a string which is the result of
# applying the rules generated by the pattern to the string n times.

def rule_constructor(n):
    rule={'...':'.','..x':'.','.x.':'.','.xx':'.','x..':'.','x.x':'.','xx.':'.','xxx':'.'} #defaults set to dot-replacement
    values={1:'...',2:'..x',4:'.x.',8:'.xx',16:'x..',32:'x.x',64:'xx.',128:'xxx'}
    two_factors=[128,64,32,16,8,4,2,1] #from largest to smallest so we don't only get 2's and 1's
    for i in two_factors:
        if n%i<n: #finding the largest power-of-two factors first
#            print i,"found to be a factor of",n
#            print values[i],"set to x"
            rule[values[i]]='x' #turn on x-replacement
            n=n%i
    return rule

def conversion(rule,pattern):
    try:
    #    print 'ORIGINAL pattern:',pattern
        newpattern=''
        lookup=pattern[-1]+pattern[0:2]        #first, the wraparound replacement for the first new character
    #    print 'replacing',lookup,'with',rule[lookup]
        newpattern+=rule[lookup]
    #    print 'new pattern:',newpattern
        for i in range(0,len(pattern)-2):               #then, the general, easy replacements
            start=i
            end=i+3  #+3 because we stop on the character before the end index
            lookup=pattern[start:end]
    #        print 'replacing',lookup,'with',rule[lookup]
            newpattern+=rule[lookup]
    #        print 'new pattern:',newpattern
        lookup=pattern[-2:]+pattern[0]          #finally, the wraparound replacement for the final new character
    #    print 'replacing',lookup,'with',rule[lookup]
        newpattern+=rule[lookup]
    #    print 'final pattern:',newpattern
        return newpattern
    except KeyError:            #generated when input isn't 3 characters long
        original_length=len(pattern)
        for i in range(0,len(pattern)):
            pattern+=pattern[i-1]
        return conversion(rule,pattern)[0:original_length]

def cellular_automaton(pat0,npat,ngen):
    rule=rule_constructor(npat)
    for i in range(0,ngen):
        pat0=conversion(rule,pat0)
    return pat0
    


print cellular_automaton('.x.x.x.x.', 17, 2)
#>>> xxxxxxx..
print cellular_automaton('.x.x.x.x.', 249, 3)
#>>> .x..x.x.x
print cellular_automaton('...x....', 125, 1)
#>>> xx.xxxxx
print cellular_automaton('...x....', 125, 2)
#>>> .xxx....
print cellular_automaton('...x....', 125, 3)
#>>> .x.xxxxx
print cellular_automaton('...x....', 125, 4)
#>>> xxxx...x
print cellular_automaton('...x....', 125, 5)
#>>> ...xxx.x
print cellular_automaton('...x....', 125, 6)
#>>> xx.x.xxx
print cellular_automaton('...x....', 125, 7)
#>>> .xxxxx..
print cellular_automaton('...x....', 125, 8)
#>>> .x...xxx
print cellular_automaton('...x....', 125, 9)
#>>> xxxx.x.x
print cellular_automaton('...x....', 125, 10)
#>>> ...xxxxx
print cellular_automaton('.',21,1)
print cellular_automaton('.',21,2)